$ git clone https://github.com/libgit2/libgit2   clone adds remote called origin
$ git clone https://github.com/lyibgit2/libgit2 name_you_want
$ git status -s   one line per file. two columns: staging area, working directory (most recent)
$ git diff   To see what youâ€™ve changed but not yet staged
$ git rm PROJECTS.md   removes file and stage it as deleted
$ git rm --cached README    removes the file content from de index
$ git reset -- <file>   use restore instead, unstages the file or takes it back to the head commit
$ git reset HEAD CONTRIBUTING.md  use restore instead, this simply unstages apparently, from documentation
$ git mv README.md README   renames file from README.md to README
$ git log   lists all commits and has many options or arguments
$ git commit --amend    be careful. this overwrites the last commit with whatever you added between them
$ git checkout -- CONTRIBUTING.md   discards the last changes and takes it back to the last commits
$ git restore --staged CONTRIBUTING.md   unstages
$ git restore CONTRIBUTING.md   descards changes, takes it back to the last commit


remote

$ git remote   lists the shortnames of each remote handle
$ git remote -v   shortnames and links
$ git remote add <shortname> <url>   adds new remote
$ git fetch pb    downloads all new info from remote shortnamed pb  does'n merge
$ git pull    fetches and merges, main to main or whatever
$ git push origin master   origin(remote), master(branch, local I think or maybe is both)
$ git remote show origin    aditional info about the specified remote
$ git remote rename pb paul   pb -> paul
$ git remote remove paul   removes remote paul


branching

$ git branch testing   creates new pointer or branch but HEAD keeps pointing to the previous branch
$ git log --all lists all the commits made in all branches
$ git log --oneline --decorate --graph --all   shows commits likw a graph
$ git switch -c new-branch   creates and switches to a new branch
$ git checkout -b my-branch   creates a new branch as switches to it
$ git merge hotfix   merges hotfix branch to your current branch
$ git branch -d hotfix   deletes branch (after merging for instance)
$ git status   shows the file that has conflicts to be merged
$ git add    to both files to mark them as resolved
$ git branch --move bad-branch-name corrected-branch-name   changes a branch name locally
$ git push --set-upstream origin corrected-branch-name  changes remote branch name
$ git push origin --delete bad-branch-name   now it's fully replace
$ git branch --move master main  renames local master to main, read more about it to change the remote as well


remote branches

$ git clone -o booyah    booyah/master would be the default remote branch intead of origin master after cloning
$ git fetch origin   downloads and updates your database, moving your origin/master pointer or whatever its name is to its new position
$ git push origin serverfix:serverfix   pushes your local branch serverfix to a new branch also called serverfix in your remote origin
$ git push origin serverfix:awesomebranch   example with a different name, local:remote
$ git checkout -b serverfix origin/serverfix   creates a new branch which starts from the remote origin/serverfix and switches to it
$ git checkout -b sf origin/serverfix   same but using a different name
$ git checkout --track origin/serverfix   creates new branch and sets it to track origin/serverfix  if the branch doesn't exists and there's only one origin/serverfix
$ git checkout serverfix   switches to it
$ git branch -u origin/serverfix sets the current branch to track origin/serverfix
$ git branch -vv   lists local branches and what they are tracking
$ git pull   looks for what server and branch your current branch is trancking, then fetches and merges
$ git push origin --delete serverfix   deletes branch origin/serverfix
